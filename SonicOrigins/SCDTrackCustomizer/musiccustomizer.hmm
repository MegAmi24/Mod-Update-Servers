Code "SCD Music Customizer" by "MegAmi"
//
    #include "ReflectionHelpers" noemit

    #lib "HMM"
    #lib "INI"
    #lib "RetroRflParam"

    static bool IsConfigInitialised = false;

    static int TitleMusic = 0;
    static int PPAMusic = 0;
    static int PPCMusic = 0;
    static int PPDMusic = 0;
    static int CCAMusic = 0;
    static int CCCMusic = 0;
    static int CCDMusic = 0;
    static int TTAMusic = 0;
    static int TTCMusic = 0;
    static int TTDMusic = 0;
    static int QQAMusic = 0;
    static int QQCMusic = 0;
    static int QQDMusic = 0;
    static int WWAMusic = 0;
    static int WWCMusic = 0;
    static int WWDMusic = 0;
    static int SSAMusic = 0;
    static int SSCMusic = 0;
    static int SSDMusic = 0;
    static int MMAMusic = 0;
    static int MMCMusic = 0;
    static int MMDMusic = 0;
    static int SpecialMusic = 0;
    static int BossMusic = 0;
    static int FinalFeverMusic = 0;
    static int InvincibleMusic = 0;
    static int SpeedUpMusic = 0;
    static int ZoneClearMusic = 0;
    static int GameOverMusic = 0;
    static int LittlePlanetMusic = 0;
//
{
    var RetroRflParamInfo = Reflection.GetDataInfo<RetroRflParam.Root>("retro_rfl_param");

    if (RetroRflParamInfo.pData == null)
        return;

    if (!IsConfigInitialised)
    {
        var modsQuery = HMM.FindModsByName("SCD Track Customizer");

        if (modsQuery.Count == 1)
        {
            string modConfigIniPath = System.IO.Path.Combine(modsQuery[0].Path, "mod.ini");
            var ini = INI.Read(modConfigIniPath);

            TitleMusic = INI.Parse<int>(ini["Music"]["Title"], TitleMusic);
            PPAMusic = INI.Parse<int>(ini["Music"]["PPA"], PPAMusic);
            PPCMusic = INI.Parse<int>(ini["Music"]["PPC"], PPCMusic);
            PPDMusic = INI.Parse<int>(ini["Music"]["PPD"], PPDMusic);
            CCAMusic = INI.Parse<int>(ini["Music"]["CCA"], CCAMusic);
            CCCMusic = INI.Parse<int>(ini["Music"]["CCC"], CCCMusic);
            CCDMusic = INI.Parse<int>(ini["Music"]["CCD"], CCDMusic);
            TTAMusic = INI.Parse<int>(ini["Music"]["TTA"], TTAMusic);
            TTCMusic = INI.Parse<int>(ini["Music"]["TTC"], TTCMusic);
            TTDMusic = INI.Parse<int>(ini["Music"]["TTD"], TTDMusic);
            QQAMusic = INI.Parse<int>(ini["Music"]["QQA"], QQAMusic);
            QQCMusic = INI.Parse<int>(ini["Music"]["QQC"], QQCMusic);
            QQDMusic = INI.Parse<int>(ini["Music"]["QQD"], QQDMusic);
            WWAMusic = INI.Parse<int>(ini["Music"]["WWA"], WWAMusic);
            WWCMusic = INI.Parse<int>(ini["Music"]["WWC"], WWCMusic);
            WWDMusic = INI.Parse<int>(ini["Music"]["WWD"], WWDMusic);
            SSAMusic = INI.Parse<int>(ini["Music"]["SSA"], SSAMusic);
            SSCMusic = INI.Parse<int>(ini["Music"]["SSC"], SSCMusic);
            SSDMusic = INI.Parse<int>(ini["Music"]["SSD"], SSDMusic);
            MMAMusic = INI.Parse<int>(ini["Music"]["MMA"], MMAMusic);
            MMCMusic = INI.Parse<int>(ini["Music"]["MMC"], MMCMusic);
            MMDMusic = INI.Parse<int>(ini["Music"]["MMD"], MMDMusic);
            SpecialMusic = INI.Parse<int>(ini["Music"]["Special"], SpecialMusic);
            BossMusic = INI.Parse<int>(ini["Music"]["Boss"], BossMusic);
            FinalFeverMusic = INI.Parse<int>(ini["Music"]["FinalFever"], FinalFeverMusic);
            InvincibleMusic = INI.Parse<int>(ini["Music"]["Invincible"], InvincibleMusic);
            SpeedUpMusic = INI.Parse<int>(ini["Music"]["SpeedUp"], SpeedUpMusic);
            ZoneClearMusic = INI.Parse<int>(ini["Music"]["ZoneClear"], ZoneClearMusic);
            GameOverMusic = INI.Parse<int>(ini["Music"]["GameOver"], GameOverMusic);
            LittlePlanetMusic = INI.Parse<int>(ini["Music"]["LittlePlanet"], LittlePlanetMusic);
        }
        else
        {
            // your mod isn't present in the active mods list or has duplicates, so you did something wrong.
        }

        IsConfigInitialised = true;
    }

    // All settings use these options: 0 (Default) = Let OST option decide, 1 = JP, 2 = US

    // Title Screen
    if (TitleMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[66].m_cue.Value, "DA26_TitleScreen_J");
    }
    else if (TitleMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[36].m_cue.Value, "DA26_TitleScreen_E");
    }

    // Palmtree Panic
    if (PPAMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[43].m_cue.Value, "DA03_R1A_J");
    }
    else if (PPAMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[12].m_cue.Value, "DA03_R1A_E");
    }

    // Palmtree Panic "G" Mix
    if (PPCMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[44].m_cue.Value, "DA04_R1C_J");
    }
    else if (PPCMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[13].m_cue.Value, "DA04_R1C_E");
    }

    // Palmtree Panic "B" Mix
    if (PPDMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[45].m_cue.Value, "DA05_R1D_J");
    }
    else if (PPDMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[14].m_cue.Value, "DA05_R1D_E");
    }

    // Collision Chaos
    if (CCAMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[46].m_cue.Value, "DA06_R3A_J");
    }
    else if (CCAMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[15].m_cue.Value, "DA06_R3A_E");
    }

    // Collision Chaos "G" Mix
    if (CCCMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[47].m_cue.Value, "DA07_R3C_J");
    }
    else if (CCCMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[16].m_cue.Value, "DA07_R3C_E");
    }

    // Collision Chaos "B" Mix
    if (CCDMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[48].m_cue.Value, "DA08_R3D_J");
    }
    else if (CCDMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[17].m_cue.Value, "DA08_R3D_E");
    }

    // Tidal Tempest
    if (TTAMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[49].m_cue.Value, "DA09_R4A_J");
    }
    else if (TTAMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[18].m_cue.Value, "DA09_R4A_E");
    }

    // Tidal Tempest "G" Mix
    if (TTCMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[50].m_cue.Value, "DA10_R4C_J");
    }
    else if (TTCMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[19].m_cue.Value, "DA10_R4C_E");
    }

    // Tidal Tempest "B" Mix
    if (TTDMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[51].m_cue.Value, "DA11_R4D_J");
    }
    else if (TTDMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[20].m_cue.Value, "DA11_R4D_E");
    }

    // Quartz Quadrant
    if (QQAMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[52].m_cue.Value, "DA12_R5A_J");
    }
    else if (QQAMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[21].m_cue.Value, "DA12_R5A_E");
    }

    // Quartz Quadrant "G" Mix
    if (QQCMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[53].m_cue.Value, "DA13_R5C_J");
    }
    else if (QQCMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[22].m_cue.Value, "DA13_R5C_E");
    }

    // Quartz Quadrant "B" Mix
    if (QQDMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[54].m_cue.Value, "DA14_R5D_J");
    }
    else if (QQDMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[23].m_cue.Value, "DA14_R5D_E");
    }

    // Wacky Workbench
    if (WWAMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[55].m_cue.Value, "DA15_R6A_J");
    }
    else if (WWAMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[24].m_cue.Value, "DA15_R6A_E");
    }

    // Wacky Workbench "G" Mix
    if (WWCMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[56].m_cue.Value, "DA16_R6C_J");
    }
    else if (WWCMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[25].m_cue.Value, "DA16_R6C_E");
    }

    // Wacky Workbench "B" Mix
    if (WWDMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[57].m_cue.Value, "DA17_R6D_J");
    }
    else if (WWDMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[26].m_cue.Value, "DA17_R6D_E");
    }

    // Stardust Speedway
    if (SSAMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[58].m_cue.Value, "DA18_R7A_J");
    }
    else if (SSAMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[27].m_cue.Value, "DA18_R7A_E");
    }

    // Stardust Speedway "G" Mix
    if (SSCMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[59].m_cue.Value, "DA19_R7C_J");
    }
    else if (SSCMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[28].m_cue.Value, "DA19_R7C_E");
    }

    // Stardust Speedway "B" Mix
    if (SSDMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[60].m_cue.Value, "DA20_R7D_J");
    }
    else if (SSDMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[29].m_cue.Value, "DA20_R7D_E");
    }

    // Metallic Madness
    if (MMAMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[61].m_cue.Value, "DA21_R8A_J");
    }
    else if (MMAMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[30].m_cue.Value, "DA21_R8A_E");
    }

    // Metallic Madness "G" Mix
    if (MMCMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[62].m_cue.Value, "DA22_R8C_J");
    }
    else if (MMCMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[31].m_cue.Value, "DA22_R8C_E");
    }

    // Metallic Madness "B" Mix
    if (MMDMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[63].m_cue.Value, "DA23_R8D_J");
    }
    else if (MMDMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[32].m_cue.Value, "DA23_R8D_E");
    }

    // Special Stage
    if (SpecialMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[64].m_cue.Value, "DA32_SpecialStage_J");
    }
    else if (SpecialMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[33].m_cue.Value, "DA32_SpecialStage_E");
    }

    // Boss!!
    if (BossMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[38].m_cue.Value, "DA24_Boss_J");
    }
    else if (BossMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[7].m_cue.Value, "DA24_Boss_E");
    }

    // Final Fever
    if (FinalFeverMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[40].m_cue.Value, "DA25_FinalBoss_J");
    }
    else if (FinalFeverMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[9].m_cue.Value, "DA25_FinalBoss_E");
    }

    // Invincible!!
    if (InvincibleMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[42].m_cue.Value, "DA30_Invincibility_J");
    }
    else if (InvincibleMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[11].m_cue.Value, "DA30_Invincibility_E");
    }

    // Speed Up!!
    if (SpeedUpMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[65].m_cue.Value, "DA29_SpeedShoes_J");
    }
    else if (SpeedUpMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[34].m_cue.Value, "DA29_SpeedShoes_E");
    }

    // Zone Clear
    if (ZoneClearMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[67].m_cue.Value, "DA28_ZoneComplete_J");
    }
    else if (ZoneClearMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[37].m_cue.Value, "DA28_ZoneComplete_E");
    }

    // Game Over
    if (GameOverMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[41].m_cue.Value, "DA31_GameOver_J");
    }
    else if (GameOverMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[10].m_cue.Value, "DA31_GameOver_E");
    }

    // Little Planet
    if (LittlePlanetMusic == 1)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[39].m_cue.Value, "DA33_DAGarden_J");
    }
    else if (LittlePlanetMusic == 2)
    {
        RFL_SET_PARAM(RetroRflParamInfo, m_RetroMusicSonicCD[8].m_cue.Value, "DA33_DAGarden_E");
    }
}

Library "RetroRflParam"
{
    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public struct CString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get => Marshal.PtrToStringAnsi((IntPtr)pValue);
            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 48)]
    public struct RetroSfxData
    {
        [FieldOffset(0)]  public CString m_sfx;
        [FieldOffset(16)] public CString m_cue;
        [FieldOffset(32)] public CString m_music;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40)]
    public struct RetroMusicData
    {
        [FieldOffset(0)]  public CString m_music;
        [FieldOffset(16)] public CString m_cue;
        [FieldOffset(32)] public float m_speed;
    }

    public enum StageKind : sbyte
    {
        STAGEKIND_NONE = 0,
        STAGEKIND_SONIC1_START = 1,
        STAGEKIND_GREEN_HILL_ZONE_ACT_1 = 1,
        STAGEKIND_GREEN_HILL_ZONE_ACT_2 = 2,
        STAGEKIND_GREEN_HILL_ZONE_ACT_3 = 3,
        STAGEKIND_MARBLE_ZONE_ACT_1 = 4,
        STAGEKIND_MARBLE_ZONE_ACT_2 = 5,
        STAGEKIND_MARBLE_ZONE_ACT_3 = 6,
        STAGEKIND_SPRING_YARD_ZONE_ACT_1 = 7,
        STAGEKIND_SPRING_YARD_ZONE_ACT_2 = 8,
        STAGEKIND_SPRING_YARD_ZONE_ACT_3 = 9,
        STAGEKIND_LABYRINTH_ZONE_ACT_1 = 10,
        STAGEKIND_LABYRINTH_ZONE_ACT_2 = 11,
        STAGEKIND_LABYRINTH_ZONE_ACT_3 = 12,
        STAGEKIND_STAR_LIGHT_ZONE_ACT_1 = 13,
        STAGEKIND_STAR_LIGHT_ZONE_ACT_2 = 14,
        STAGEKIND_STAR_LIGHT_ZONE_ACT_3 = 15,
        STAGEKIND_SCRAP_BRAIN_ZONE_ACT_1 = 16,
        STAGEKIND_SCRAP_BRAIN_ZONE_ACT_2 = 17,
        STAGEKIND_SCRAP_BRAIN_ZONE_ACT_3 = 18,
        STAGEKIND_FINAL_ZONE = 19,
        STAGEKIND_SONIC1_SPECIAL_STAGE_1 = 20,
        STAGEKIND_SONIC1_SPECIAL_STAGE_2 = 21,
        STAGEKIND_SONIC1_SPECIAL_STAGE_3 = 22,
        STAGEKIND_SONIC1_SPECIAL_STAGE_4 = 23,
        STAGEKIND_SONIC1_SPECIAL_STAGE_5 = 24,
        STAGEKIND_SONIC1_SPECIAL_STAGE_6 = 25,
        STAGEKIND_SONIC1_ALL_STAGE = 26,
        STAGEKIND_SONIC1_END = 27,
        STAGEKIND_SONIC2_START = 27,
        STAGEKIND_EMERALD_HILL_ZONE_ACT_1 = 27,
        STAGEKIND_EMERALD_HILL_ZONE_ACT_2 = 28,
        STAGEKIND_CHEMICAL_PLANT_ZONE_ACT_1 = 29,
        STAGEKIND_CHEMICAL_PLANT_ZONE_ACT_2 = 30,
        STAGEKIND_AQUATIC_RUIN_ZONE_ACT_1 = 31,
        STAGEKIND_AQUATIC_RUIN_ZONE_ACT_2 = 32,
        STAGEKIND_CASINO_NIGHT_ZONE_ACT_1 = 33,
        STAGEKIND_CASINO_NIGHT_ZONE_ACT_2 = 34,
        STAGEKIND_HILL_TOP_ZONE_ACT_1 = 35,
        STAGEKIND_HILL_TOP_ZONE_ACT_2 = 36,
        STAGEKIND_MYSTIC_CAVE_ZONE_ACT_1 = 37,
        STAGEKIND_MYSTIC_CAVE_ZONE_ACT_2 = 38,
        STAGEKIND_OIL_OCEAN_ZONE_ACT_1 = 39,
        STAGEKIND_OIL_OCEAN_ZONE_ACT_2 = 40,
        STAGEKIND_METROPOLIS_ZONE_ACT_1 = 41,
        STAGEKIND_METROPOLIS_ZONE_ACT_2 = 42,
        STAGEKIND_METROPOLIS_ZONE_ACT_3 = 43,
        STAGEKIND_SKY_CHASE_ZONE = 44,
        STAGEKIND_WING_FORTRESS_ZONE = 45,
        STAGEKIND_DEATH_EGG_ZONE = 46,
        STAGEKIND_SONIC2_SPECIAL_STAGE_1 = 47,
        STAGEKIND_SONIC2_SPECIAL_STAGE_2 = 48,
        STAGEKIND_SONIC2_SPECIAL_STAGE_3 = 49,
        STAGEKIND_SONIC2_SPECIAL_STAGE_4 = 50,
        STAGEKIND_SONIC2_SPECIAL_STAGE_5 = 51,
        STAGEKIND_SONIC2_SPECIAL_STAGE_6 = 52,
        STAGEKIND_SONIC2_SPECIAL_STAGE_7 = 53,
        STAGEKIND_SONIC2_ALL_STAGE = 54,
        STAGEKIND_SONIC2_END = 55,
        STAGEKIND_SONIC3K_START = 55,
        STAGEKIND_ANGEL_ISLAND_ZONE_ACT_1 = 55,
        STAGEKIND_ANGEL_ISLAND_ZONE_ACT_2 = 56,
        STAGEKIND_HYDROCITY_ZONE_ACT_1 = 57,
        STAGEKIND_HYDROCITY_ZONE_ACT_2 = 58,
        STAGEKIND_MARBLE_GARDEN_ZONE_ACT_1 = 59,
        STAGEKIND_MARBLE_GARDEN_ZONE_ACT_2 = 60,
        STAGEKIND_CARNIVAL_NIGHT_ZONE_ACT_1 = 61,
        STAGEKIND_CARNIVAL_NIGHT_ZONE_ACT_2 = 62,
        STAGEKIND_ICE_CAP_ZONE_ACT_1 = 63,
        STAGEKIND_ICE_CAP_ZONE_ACT_2 = 64,
        STAGEKIND_LAUNCH_BASE_ZONE_ACT_1 = 65,
        STAGEKIND_LAUNCH_BASE_ZONE_ACT_2 = 66,
        STAGEKIND_MUSHROOM_HILL_ZONE_ACT_1 = 67,
        STAGEKIND_MUSHROOM_HILL_ZONE_ACT_2 = 68,
        STAGEKIND_FLYING_BATTERY_ZONE_ACT_1 = 69,
        STAGEKIND_FLYING_BATTERY_ZONE_ACT_2 = 70,
        STAGEKIND_SANDOPOLIS_ZONE_ACT_1 = 71,
        STAGEKIND_SANDOPOLIS_ZONE_ACT_2 = 72,
        STAGEKIND_LAVA_REEF_ZONE_ACT_1 = 73,
        STAGEKIND_LAVA_REEF_ZONE_ACT_2 = 74,
        STAGEKIND_HIDDEN_PALACE_ZONE = 75,
        STAGEKIND_SKY_SANCTUARY_ZONE_ACT_1 = 76,
        STAGEKIND_SKY_SANCTUARY_ZONE_ACT_2 = 77,
        STAGEKIND_DEATH_EGG_ZONE_ACT_1 = 78,
        STAGEKIND_DEATH_EGG_ZONE_ACT_2 = 79,
        STAGEKIND_THE_DOOMSDAY_ZONE = 80,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_1 = 81,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_2 = 82,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_3 = 83,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_4 = 84,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_5 = 85,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_6 = 86,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_7 = 87,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_8 = 88,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_9 = 89,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_10 = 90,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_11 = 91,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_12 = 92,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_13 = 93,
        STAGEKIND_SONIC3K_SPECIAL_STAGE_14 = 94,
        STAGEKIND_SONIC3K_ALL_STAGE = 95,
        STAGEKIND_SONIC3K_END = 96,
        STAGEKIND_SONICCD_START = 96,
        STAGEKIND_PALMTREE_PANIC_ZONE1 = 96,
        STAGEKIND_PALMTREE_PANIC_ZONE2 = 97,
        STAGEKIND_PALMTREE_PANIC_ZONE3 = 98,
        STAGEKIND_COLLISION_CHAOS_ZONE1 = 99,
        STAGEKIND_COLLISION_CHAOS_ZONE2 = 100,
        STAGEKIND_COLLISION_CHAOS_ZONE3 = 101,
        STAGEKIND_TIDAL_TEMPEST_ZONE1 = 102,
        STAGEKIND_TIDAL_TEMPEST_ZONE2 = 103,
        STAGEKIND_TIDAL_TEMPEST_ZONE3 = 104,
        STAGEKIND_QUARTZ_QUADRANT_ZONE1 = 105,
        STAGEKIND_QUARTZ_QUADRANT_ZONE2 = 106,
        STAGEKIND_QUARTZ_QUADRANT_ZONE3 = 107,
        STAGEKIND_WACKY_WORKBENCH_ZONE1 = 108,
        STAGEKIND_WACKY_WORKBENCH_ZONE2 = 109,
        STAGEKIND_WACKY_WORKBENCH_ZONE3 = 110,
        STAGEKIND_STARDUST_SPEEDWAY_ZONE1 = 111,
        STAGEKIND_STARDUST_SPEEDWAY_ZONE2 = 112,
        STAGEKIND_STARDUST_SPEEDWAY_ZONE3 = 113,
        STAGEKIND_METALLIC_MADNESS_ZONE1 = 114,
        STAGEKIND_METALLIC_MADNESS_ZONE2 = 115,
        STAGEKIND_METALLIC_MADNESS_ZONE3 = 116,
        STAGEKIND_SONICCD_SPECIAL_STAGE_1 = 117,
        STAGEKIND_SONICCD_SPECIAL_STAGE_2 = 118,
        STAGEKIND_SONICCD_SPECIAL_STAGE_3 = 119,
        STAGEKIND_SONICCD_SPECIAL_STAGE_4 = 120,
        STAGEKIND_SONICCD_SPECIAL_STAGE_5 = 121,
        STAGEKIND_SONICCD_SPECIAL_STAGE_6 = 122,
        STAGEKIND_SONICCD_SPECIAL_STAGE_7 = 123,
        STAGEKIND_SONICCD_ALL_STAGE = 124,
        STAGEKIND_SONICCD_END = 125,
        STAGEKIND_NUM = 125,
        STAGEKIND_SONIC1_NUM = 26,
        STAGEKIND_SONIC2_NUM = 28,
        STAGEKIND_SONIC3K_NUM = 41,
        STAGEKIND_SONICCD_NUM = 29,
        STAGEKIND_ALL_START = 1,
        STAGEKIND_ALL_END = 125,
        STAGEKIND_STORY_END = 80
    }

    public enum BossKind : sbyte
    {
        BOSSKIND_NONE = 0,
        BOSSKIND_EGG_WRECKER = 1,
        BOSSKIND_EGG_SCORCHER = 2,
        BOSSKIND_EGG_STINGER = 3,
        BOSSKIND_EGG_MOBILE_ = 4,
        BOSSKIND_EGG_SPIKER = 5,
        BOSSKIND_EGG_CRUSHER = 6,
        BOSSKIND_EGG_DRILLSTER = 7,
        BOSSKIND_EGG_POISON = 8,
        BOSSKIND_EGG_HAMMER = 9,
        BOSSKIND_EGG_CLAW = 10,
        BOSSKIND_EGG_SCORCHER_MK_II = 11,
        BOSSKIND_EGG_DIGGER = 12,
        BOSSKIND_EGGMARINE = 13,
        BOSSKIND_EGG_BOUNCER = 14,
        BOSSKIND_LASER_PRISON = 15,
        BOSSKIND_MECHA_SONIC = 16,
        BOSSKIND_DEATH_EGG_ROBO = 17,
        BOSSKIND_EGG_SCORCHER_MK_III = 18,
        BOSSKIND_EGG_VORTEX = 19,
        BOSSKIND_EGG_DRILLSTER_MK_II = 20,
        BOSSKIND_EGG_GRAVITRON = 21,
        BOSSKIND_EGG_FROSTER = 22,
        BOSSKIND_EGG_CANNON = 23,
        BOSSKIND_EGG_ROCKET = 24,
        BOSSKIND_BIG_ARMS = 25,
        BOSSKIND_EGG_SCRAMBLER = 26,
        BOSSKIND_EGG_HANGER = 27,
        BOSSKIND_EGG_GOLEM = 28,
        BOSSKIND_EGG_INFERNO = 29,
        BOSSKIND_GIANT_EGGMAN_ROBO = 30,
        BOSSKIND_DEATH_EGG_ROCKET = 31,
        BOSSKIND_EGG_HVC_001 = 32,
        BOSSKIND_EGG_TILTER = 33,
        BOSSKIND_EGG_BUBBLE = 34,
        BOSSKIND_EGG_CONVEYER = 35,
        BOSSKIND_EGG_RAZER = 36,
        BOSSKIND_METAL_SONIC = 37,
        BOSSKIND_EGG_SPINNER = 38,
        BOSSKIND_MECHA_SONIC_MK_II = 39,
        BOSSKIND_SUPER_MECHA_SONIC_MK_II = 40,
        BOSSKIND_NUM = 41
    }

    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public struct RetroBossrushData
    {
        [FieldOffset(0)]  public byte m_category;
        [FieldOffset(1)]  public byte m_stage;
        [FieldOffset(2)]  public ushort m_entity;
        [FieldOffset(4)]  public ushort m_waterstate;
        [FieldOffset(8)]  public uint m_waterlevel;
        [FieldOffset(12)] public StageKind m_hiteStageKind;
        [FieldOffset(13)] public BossKind m_hiteBossKind;
        [FieldOffset(14)] public BossKind m_hiteBossKind2;
        [FieldOffset(15)] public BossKind m_hiteBossKind3;
    }

    [StructLayout(LayoutKind.Explicit, Size = 38088)]
    public struct Root
    {
        [FieldOffset(0)]     public unsafe fixed byte /* RetroSfxData[84] */ _m_RetroSfxSonic1[4032];

        public unsafe RetroSfxData* m_RetroSfxSonic1
        {
            get
            {
                fixed (byte* p_m_RetroSfxSonic1 = _m_RetroSfxSonic1)
                    return (RetroSfxData*)p_m_RetroSfxSonic1;
            }
        }

        [FieldOffset(4032)]  public unsafe fixed byte /* RetroSfxData[127] */ _m_RetroSfxSonic2[6096];

        public unsafe RetroSfxData* m_RetroSfxSonic2
        {
            get
            {
                fixed (byte* p_m_RetroSfxSonic2 = _m_RetroSfxSonic2)
                    return (RetroSfxData*)p_m_RetroSfxSonic2;
            }
        }

        [FieldOffset(10128)] public unsafe fixed byte /* RetroSfxData[262] */ _m_RetroSfxSonic3k[12576];

        public unsafe RetroSfxData* m_RetroSfxSonic3k
        {
            get
            {
                fixed (byte* p_m_RetroSfxSonic3k = _m_RetroSfxSonic3k)
                    return (RetroSfxData*)p_m_RetroSfxSonic3k;
            }
        }

        [FieldOffset(22704)] public unsafe fixed byte /* RetroSfxData[92] */ _m_RetroSfxSonicCD[4416];

        public unsafe RetroSfxData* m_RetroSfxSonicCD
        {
            get
            {
                fixed (byte* p_m_RetroSfxSonicCD = _m_RetroSfxSonicCD)
                    return (RetroSfxData*)p_m_RetroSfxSonicCD;
            }
        }

        [FieldOffset(27120)] public unsafe fixed byte /* RetroMusicData[29] */ _m_RetroMusicSonic1[1160];

        public unsafe RetroMusicData* m_RetroMusicSonic1
        {
            get
            {
                fixed (byte* p_m_RetroMusicSonic1 = _m_RetroMusicSonic1)
                    return (RetroMusicData*)p_m_RetroMusicSonic1;
            }
        }

        [FieldOffset(28280)] public unsafe fixed byte /* RetroMusicData[47] */ _m_RetroMusicSonic2[1880];

        public unsafe RetroMusicData* m_RetroMusicSonic2
        {
            get
            {
                fixed (byte* p_m_RetroMusicSonic2 = _m_RetroMusicSonic2)
                    return (RetroMusicData*)p_m_RetroMusicSonic2;
            }
        }

        [FieldOffset(30160)] public unsafe fixed byte /* RetroMusicData[113] */ _m_RetroMusicSonic3k[4520];

        public unsafe RetroMusicData* m_RetroMusicSonic3k
        {
            get
            {
                fixed (byte* p_m_RetroMusicSonic3k = _m_RetroMusicSonic3k)
                    return (RetroMusicData*)p_m_RetroMusicSonic3k;
            }
        }

        [FieldOffset(34680)] public unsafe fixed byte /* RetroMusicData[68] */ _m_RetroMusicSonicCD[2720];

        public unsafe RetroMusicData* m_RetroMusicSonicCD
        {
            get
            {
                fixed (byte* p_m_RetroMusicSonicCD = _m_RetroMusicSonicCD)
                    return (RetroMusicData*)p_m_RetroMusicSonicCD;
            }
        }

        [FieldOffset(37400)] public unsafe fixed byte /* RetroBossrushData[6] */ _m_RetroBossrushSonic1[96];

        public unsafe RetroBossrushData* m_RetroBossrushSonic1
        {
            get
            {
                fixed (byte* p_m_RetroBossrushSonic1 = _m_RetroBossrushSonic1)
                    return (RetroBossrushData*)p_m_RetroBossrushSonic1;
            }
        }

        [FieldOffset(37496)] public unsafe fixed byte /* RetroBossrushData[10] */ _m_RetroBossrushSonic2[160];

        public unsafe RetroBossrushData* m_RetroBossrushSonic2
        {
            get
            {
                fixed (byte* p_m_RetroBossrushSonic2 = _m_RetroBossrushSonic2)
                    return (RetroBossrushData*)p_m_RetroBossrushSonic2;
            }
        }

        [FieldOffset(37656)] public unsafe fixed byte /* RetroBossrushData[11] */ _m_RetroBossrushSonic3k[176];

        public unsafe RetroBossrushData* m_RetroBossrushSonic3k
        {
            get
            {
                fixed (byte* p_m_RetroBossrushSonic3k = _m_RetroBossrushSonic3k)
                    return (RetroBossrushData*)p_m_RetroBossrushSonic3k;
            }
        }

        [FieldOffset(37832)] public unsafe fixed byte /* RetroBossrushData[9] */ _m_RetroBossrushSonic3kk[144];

        public unsafe RetroBossrushData* m_RetroBossrushSonic3kk
        {
            get
            {
                fixed (byte* p_m_RetroBossrushSonic3kk = _m_RetroBossrushSonic3kk)
                    return (RetroBossrushData*)p_m_RetroBossrushSonic3kk;
            }
        }

        [FieldOffset(37976)] public unsafe fixed byte /* RetroBossrushData[7] */ _m_RetroBossrushSonicCD[112];

        public unsafe RetroBossrushData* m_RetroBossrushSonicCD
        {
            get
            {
                fixed (byte* p_m_RetroBossrushSonicCD = _m_RetroBossrushSonicCD)
                    return (RetroBossrushData*)p_m_RetroBossrushSonicCD;
            }
        }
    }

}